# auto-generated by grc.converter

id: mesa_AutoDopplerCorrect
label: Auto Doppler Correct
category: '[mesa]'

parameters:
-   id: freq
    label: Radio Frequency
    dtype: float
    default: freq
-   id: sampleRate
    label: Sample Rate
    dtype: float
    default: samp_rate
-   id: maxDrift
    label: Max Drift (Hz)
    dtype: float
    default: '3000.0'
-   id: minWidth
    label: Min Signal Width (Hz)
    dtype: float
    default: '2000.0'
-   id: expectedWidth
    label: Expected Signal Width (Hz)
    dtype: float
    default: '6000.0'
-   id: shiftHolddownMS
    label: Shift Hold Time (ms)
    dtype: int
    default: '2000'
-   id: holdUpSec
    label: Detect Hold Time (s)
    dtype: float
    default: '10.0'
-   id: fft_size
    label: FFT Size
    dtype: int
    default: '1024'
-   id: squelchThreshold
    label: Squelch Threshold
    dtype: float
    default: '-80.0'
-   id: framesToAvg
    label: Frames to Avg
    dtype: int
    default: '6'
-   id: detectionMethod
    label: Detection Method
    dtype: enum
    options: ['1', '2']
    option_labels: [Closest Signal, Boxing Outside-In]
-   id: processMessages
    label: Message Processing
    dtype: enum
    options: ['False', 'True']
    option_labels: ['Off', 'On']

inputs:
-   domain: stream
    dtype: complex
-   domain: message
    id: msgin
    optional: true

outputs:
-   domain: stream
    dtype: complex
-   domain: message
    id: msgout
    optional: true
-   domain: message
    id: signaldetect
    optional: true
-   domain: message
    id: freq_info
    optional: true
-   domain: message
    id: state
    optional: true
-   domain: message
    id: freq_shift
    optional: true

templates:
    imports: import mesa
    make: mesa.AutoDopplerCorrect(${freq}, ${sampleRate}, ${maxDrift}, ${minWidth},
        ${expectedWidth}, ${shiftHolddownMS}, ${fft_size}, ${squelchThreshold}, ${framesToAvg},
        ${holdUpSec}, ${processMessages},${detectionMethod})
    callbacks:
    - setSquelch(${squelchThreshold})
    - setMinWidthHz(${minWidthHz})
    - setCenterFrequency(${radioCenterFreq})
    - setExpectedWidth(${expectedWidth})
    - setMaxDrift(${maxDrift})

documentation: "This block scans the input signal for a signal near the center frequency\
    \ and attempts to keep the output centered.\n\nIf you would like to switch to\
    \ processing the output as a PDU, enable PDU processing.  This will enable the\
    \ msgout port.  \n\nNOTES: \n\nFor SQUELCHTHRESHOLD, pick a number that's above\
    \ any noise floor.  The detector looks for the upward transition from this squelch\
    \ threshold, therefore everything that's not a signal should be below this threshold,\
    \ such that everything above it can be assumed to be a signal.\n\nTwo methods\
    \ of detecting the active signal to center are availble.  The first (closest signal)\
    \ looks for a peak and edges closest to the specified center frequency.  This\
    \ will work well for a single channel, ASK/FSK/PSK signal.  However, if you have\
    \ a channelized signal with multiple subchannels, this will not work as well.\
    \  A boxing method is available that will look at the spectrum from the edges\
    \ in looking for the farthest edges to define the signal."

file_format: 1
